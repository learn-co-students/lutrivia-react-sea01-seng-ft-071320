{"ast":null,"code":"var _jsxFileName = \"/home/afteralec/dev/flatiron/module-4/addl-practice/lutrivia-react/lutrivia/src/components/Trivia.jsx\";\nimport React, { Component } from \"react\";\nimport Question from \"./Question\";\nimport AnsweredQuestion from \"./AnsweredQuestion\";\n\nclass Trivia extends Component {\n  constructor(props) {\n    super();\n\n    this.answerQuestion = (id, answer) => {\n      // Find the question answered\n      const question = this.state.questions.find(question => question.id === id); // Mutate this question with the user's response\n\n      question.response = answer;\n\n      if (answer === question.answer) {\n        this.props.score();\n      } // Move to the next question\n\n\n      const next = this.state.current + 1;\n      this.setState({\n        current: next\n      });\n    };\n\n    this.state = {\n      questions: [...props.questions],\n      current: 0\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"flex flex-col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, this.state.questions.map((question, i) => !!(i < this.state.current) ? React.createElement(AnsweredQuestion, Object.assign({}, question, {\n      key: question.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    })) : null), !!this.state.questions[this.state.current] ? React.createElement(Question, Object.assign({}, this.state.questions[this.state.current], {\n      answerQuestion: this.answerQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    })) : null);\n  }\n\n}\n\nexport default Trivia;","map":{"version":3,"sources":["/home/afteralec/dev/flatiron/module-4/addl-practice/lutrivia-react/lutrivia/src/components/Trivia.jsx"],"names":["React","Component","Question","AnsweredQuestion","Trivia","constructor","props","answerQuestion","id","answer","question","state","questions","find","response","score","next","current","setState","render","map","i"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;AAEA,MAAMC,MAAN,SAAqBH,SAArB,CAA+B;AAC7BI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB;;AADiB,SAQnBC,cARmB,GAQF,CAACC,EAAD,EAAKC,MAAL,KAAgB;AAC/B;AACA,YAAMC,QAAQ,GAAG,KAAKC,KAAL,CAAWC,SAAX,CAAqBC,IAArB,CACdH,QAAD,IAAcA,QAAQ,CAACF,EAAT,KAAgBA,EADf,CAAjB,CAF+B,CAM/B;;AACAE,MAAAA,QAAQ,CAACI,QAAT,GAAoBL,MAApB;;AAEA,UAAIA,MAAM,KAAKC,QAAQ,CAACD,MAAxB,EAAgC;AAC9B,aAAKH,KAAL,CAAWS,KAAX;AACD,OAX8B,CAa/B;;;AACA,YAAMC,IAAI,GAAG,KAAKL,KAAL,CAAWM,OAAX,GAAqB,CAAlC;AACA,WAAKC,QAAL,CAAc;AACZD,QAAAA,OAAO,EAAED;AADG,OAAd;AAGD,KA1BkB;;AAEjB,SAAKL,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,CAAC,GAAGN,KAAK,CAACM,SAAV,CADA;AAEXK,MAAAA,OAAO,EAAE;AAFE,KAAb;AAID;;AAsBDE,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKR,KAAL,CAAWC,SAAX,CAAqBQ,GAArB,CAAyB,CAACV,QAAD,EAAWW,CAAX,KACxB,CAAC,EAAEA,CAAC,GAAG,KAAKV,KAAL,CAAWM,OAAjB,CAAD,GACE,oBAAC,gBAAD,oBAAsBP,QAAtB;AAAgC,MAAA,GAAG,EAAEA,QAAQ,CAACF,EAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,GAEI,IAHL,CADH,EAOG,CAAC,CAAC,KAAKG,KAAL,CAAWC,SAAX,CAAqB,KAAKD,KAAL,CAAWM,OAAhC,CAAF,GACC,oBAAC,QAAD,oBACM,KAAKN,KAAL,CAAWC,SAAX,CAAqB,KAAKD,KAAL,CAAWM,OAAhC,CADN;AAEE,MAAA,cAAc,EAAE,KAAKV,cAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADD,GAKG,IAZN,CADF;AAgBD;;AA9C4B;;AAiD/B,eAAeH,MAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Question from \"./Question\";\nimport AnsweredQuestion from \"./AnsweredQuestion\";\n\nclass Trivia extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      questions: [...props.questions],\n      current: 0,\n    };\n  }\n\n  answerQuestion = (id, answer) => {\n    // Find the question answered\n    const question = this.state.questions.find(\n      (question) => question.id === id\n    );\n\n    // Mutate this question with the user's response\n    question.response = answer;\n\n    if (answer === question.answer) {\n      this.props.score();\n    }\n\n    // Move to the next question\n    const next = this.state.current + 1;\n    this.setState({\n      current: next,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"flex flex-col\">\n        {this.state.questions.map((question, i) =>\n          !!(i < this.state.current) ? (\n            <AnsweredQuestion {...question} key={question.id} />\n          ) : null\n        )}\n\n        {!!this.state.questions[this.state.current] ? (\n          <Question\n            {...this.state.questions[this.state.current]}\n            answerQuestion={this.answerQuestion}\n          />\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default Trivia;\n"]},"metadata":{},"sourceType":"module"}