{"ast":null,"code":"var _jsxFileName = \"/home/afteralec/dev/flatiron/module-4/addl-practice/lutrivia-react/lutrivia/src/components/App.jsx\";\nimport React, { Component } from \"react\";\nimport Question from \"./Question\";\nimport AnsweredQuestion from \"./AnsweredQuestion\";\nimport \"../css/App.css\";\nimport data from \"../data\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      questions: [...data.questions],\n      current: 0,\n      score: 0,\n      name: \"\"\n    };\n\n    this.score = () => {\n      const score = this.state.score + 1;\n      this.setState({\n        score: score\n      });\n    };\n\n    this.newGame = () => {\n      this.setState({\n        questions: [...data.questions],\n        current: 0,\n        score: 0\n      });\n    };\n\n    this.answerQuestion = (id, answer) => {\n      // Find the question answered\n      const question = this.state.questions.find(question => question.id === id); // Mutate this question with the user's response\n\n      question.response = answer;\n\n      if (answer === question.answer) {\n        this.score();\n      } // Move to the next question\n\n\n      const next = this.state.current + 1;\n      this.setState({\n        current: next\n      });\n    };\n\n    this.handleInputChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      event.name.value = \"\";\n      console.log(\"Submitted score \".concat(this.state.score, \" for \").concat(this.state.name, \"!\"));\n      this.newGame();\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container flow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Lutrivia\"), React.createElement(\"div\", {\n      className: \"flex flex-between\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.newGame,\n      className: \"btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"New Game\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Score: \", this.state.score)), React.createElement(\"div\", {\n      className: \"flex flex-col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, this.state.questions.map((question, i) => !!(i < this.state.current) ? React.createElement(AnsweredQuestion, Object.assign({}, question, {\n      key: question.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    })) : null), !!this.state.questions[this.state.current] ? React.createElement(Question, Object.assign({}, this.state.questions[this.state.current], {\n      answerQuestion: this.answerQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })) : null), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      className: \"flex flow-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onChange: this.handleInputChange,\n      type: \"text\",\n      name: \"name\",\n      value: this.state.name,\n      placeholder: \"Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit Score\",\n      className: \"btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/afteralec/dev/flatiron/module-4/addl-practice/lutrivia-react/lutrivia/src/components/App.jsx"],"names":["React","Component","Question","AnsweredQuestion","data","App","state","questions","current","score","name","setState","newGame","answerQuestion","id","answer","question","find","response","next","handleInputChange","event","target","value","handleSubmit","preventDefault","console","log","render","map","i"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Question from \"./Question\";\nimport AnsweredQuestion from \"./AnsweredQuestion\";\nimport \"../css/App.css\";\n\nimport data from \"../data\";\n\nclass App extends Component {\n  state = {\n    questions: [...data.questions],\n    current: 0,\n    score: 0,\n    name: \"\",\n  };\n\n  score = () => {\n    const score = this.state.score + 1;\n    this.setState({\n      score: score,\n    });\n  };\n\n  newGame = () => {\n    this.setState({\n      questions: [...data.questions],\n      current: 0,\n      score: 0,\n    });\n  };\n\n  answerQuestion = (id, answer) => {\n    // Find the question answered\n    const question = this.state.questions.find(\n      (question) => question.id === id\n    );\n\n    // Mutate this question with the user's response\n    question.response = answer;\n\n    if (answer === question.answer) {\n      this.score();\n    }\n\n    // Move to the next question\n    const next = this.state.current + 1;\n    this.setState({\n      current: next,\n    });\n  };\n\n  handleInputChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    event.name.value = \"\";\n    console.log(`Submitted score ${this.state.score} for ${this.state.name}!`);\n    this.newGame();\n  };\n\n  render() {\n    return (\n      <div className=\"container flow\">\n        <h1>Lutrivia</h1>\n        <div className=\"flex flex-between\">\n          <button onClick={this.newGame} className=\"btn\">\n            New Game\n          </button>\n          <h2>Score: {this.state.score}</h2>\n        </div>\n        <div className=\"flex flex-col\">\n          {this.state.questions.map((question, i) =>\n            !!(i < this.state.current) ? (\n              <AnsweredQuestion {...question} key={question.id} />\n            ) : null\n          )}\n\n          {!!this.state.questions[this.state.current] ? (\n            <Question\n              {...this.state.questions[this.state.current]}\n              answerQuestion={this.answerQuestion}\n            />\n          ) : null}\n        </div>\n        <form onSubmit={this.handleSubmit} className=\"flex flow-left\">\n          <input\n            onChange={this.handleInputChange}\n            type=\"text\"\n            name=\"name\"\n            value={this.state.name}\n            placeholder=\"Name\"\n          />\n          <input type=\"submit\" value=\"Submit Score\" className=\"btn\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}